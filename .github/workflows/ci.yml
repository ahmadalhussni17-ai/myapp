name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    env:
      APP_ENV: testing
      APP_KEY: base64:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
      DB_CONNECTION: sqlite
      DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
      CACHE_DRIVER: array
      QUEUE_CONNECTION: sync
      SESSION_DRIVER: array
      BROADCAST_DRIVER: log

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_mysql, bcmath, pcntl, gd, zip, sqlite3, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP deps
        run: composer install --no-interaction --prefer-dist

      - name: Prepare SQLite
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Create .env from example
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key (optional)
        run: php artisan key:generate --force

      # If your tests donâ€™t migrate automatically (e.g., missing RefreshDatabase), keep this:
      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test --colors=always

      # ---------- Frontend ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps
        run: npm ci

      - name: Build assets (Vite)
        run: npm run build

      - name: Upload built assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/build

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # only deploy from main

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Pull the built frontend from CI
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public/build

      # Copy source + built assets to server (exclude heavy/irrelevant dirs)
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: |
            .
          target: /var/www/myapp
          overwrite: true
          strip_components: 0
          exclude: |
            .git
            node_modules
            vendor

      - name: Run deploy commands on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/myapp
            # Ensure correct permissions for Laravel
            mkdir -p storage/framework/{cache,sessions,views} storage/logs bootstrap/cache
            chmod -R ug+rw storage bootstrap/cache

            # Install backend deps for production
            composer install --no-interaction --prefer-dist --no-dev --optimize-autoloader

            # Put app in maintenance (optional)
            php artisan down || true

            # Run database migrations
            php artisan migrate --force

            # Optimize caches
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Bring app back up
            php artisan up
