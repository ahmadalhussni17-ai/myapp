name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    env:
      APP_ENV: testing
      APP_KEY: base64:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
      DB_CONNECTION: sqlite
      DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
      CACHE_DRIVER: array
      QUEUE_CONNECTION: sync
      SESSION_DRIVER: array
      BROADCAST_DRIVER: log

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_mysql, bcmath, pcntl, gd, zip, sqlite3, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP deps
        run: composer install --no-interaction --prefer-dist

      - name: Prepare SQLite
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Create .env from example
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key (optional)
        run: php artisan key:generate --force

      # If your tests donâ€™t migrate automatically (e.g., missing RefreshDatabase), keep this:
      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test --colors=always

      # ---------- Frontend ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps
        run: npm ci

      - name: Build assets (Vite)
        run: npm run build

      - name: Upload built assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/build

  deploy:
  needs: test-and-build
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main'  # only deploy from main

  steps:
    - name: Checkout
    # Get the repository files for Railway to build/deploy
      uses: actions/checkout@v4

    # If you want Railway to build your app, you do NOT need the artifact download.
    # If you specifically want to reuse the built frontend from CI, keep this step:
    - name: (Optional) Download built frontend artifact
      if: always()  # remove this line if you don't need it
      uses: actions/download-artifact@v4
      with:
        name: public-build
        path: public/build

    - name: Setup Node (for Railway CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Railway CLI
      run: npm i -g @railway/cli

    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        # (Optional) Pin to a specific project/service if you have multiple:
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
      run: |
        # If you set PROJECT_ID / SERVICE_ID secrets, pass them; otherwise omit.
        if [ -n "$RAILWAY_PROJECT_ID" ] && [ -n "$RAILWAY_SERVICE_ID" ]; then
          railway up --project "$RAILWAY_PROJECT_ID" --service "$RAILWAY_SERVICE_ID" --detach
        elif [ -n "$RAILWAY_PROJECT_ID" ]; then
          railway up --project "$RAILWAY_PROJECT_ID" --detach
        else
          railway up --detach
        fi
