name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    env:
      APP_ENV: testing
      APP_KEY: base64:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
      DB_CONNECTION: sqlite
      DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
      CACHE_DRIVER: array
      QUEUE_CONNECTION: sync
      SESSION_DRIVER: array
      BROADCAST_DRIVER: log

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, pdo_mysql, bcmath, pcntl, gd, zip, sqlite3, pdo_sqlite
          coverage: none
          tools: composer:v2

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP deps
        run: composer install --no-interaction --prefer-dist

      - name: Prepare SQLite
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Create .env from example
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key (optional)
        run: php artisan key:generate --force

      # If your tests don’t migrate automatically (e.g., missing RefreshDatabase), keep this:
      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test --colors=always

      # ---------- Frontend ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps
        run: npm ci

      - name: Build assets (Vite)
        run: npm run build

      - name: Upload built assets artifact
        uses: actions/upload-artifact@v4
        with:
          name: public-build
          path: public/build

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: (Optional) Download built frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: public-build
          path: public/build

      # Fail fast if the API token isn't available to the job
      - name: Preflight – check RAILWAY_API_TOKEN
        run: |
          if [ -z "${RAILWAY_API_TOKEN}" ]; then
            echo "RAILWAY_API_TOKEN is empty. Add repo secret RAILWAY_API_TOKEN (Account/Team API token)."; exit 1;
          fi
          echo "API token present. Proceeding…"
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}

      # Sanity: show CLI version; whoami may be limited with team tokens, so ignore errors
      - name: Railway version / whoami (diagnostic)
        uses: docker://ghcr.io/railwayapp/cli:latest
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
        with:
          args: sh -lc "railway --version && railway whoami || true"

      # Deploy using the API token
      - name: Deploy to Railway (shell)
        uses: docker://ghcr.io/railwayapp/cli:latest
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        with:
          args: >-
            sh -lc "railway up --service=${RAILWAY_SERVICE_ID} --detach"

